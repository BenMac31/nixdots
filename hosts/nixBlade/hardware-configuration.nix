# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "thunderbolt" "nvme" "usbhid" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel"];
  boot.kernelParams = ["rcu_nocbs=all" "rcutree.enable_rcu_lazy=1"];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/d89aa6f6-efec-458f-a8d7-23bed9ec888e";
      fsType = "btrfs";
      options = [ "subvol=root" ];
    };

  boot.initrd.luks.devices."root".device = "/dev/disk/by-uuid/3c4c03a9-e61e-4d87-a45b-ec4991e95e5b";

  fileSystems."/nix" =
    { device = "/dev/disk/by-uuid/d89aa6f6-efec-458f-a8d7-23bed9ec888e";
      fsType = "btrfs";
      options = [ "subvol=nix" ];
    };

  fileSystems."/home" =
    { device = "/dev/disk/by-uuid/d89aa6f6-efec-458f-a8d7-23bed9ec888e";
      fsType = "btrfs";
      options = [ "subvol=home" ];
    };

  fileSystems."/home/greencheetah/Desktop" =
    { device = "/home/home/greencheetah/.local/share/applications";
      fsType = "none";
      options = [ "bind" ];
    };

  fileSystems."/swap" =
    { device = "/dev/disk/by-uuid/d89aa6f6-efec-458f-a8d7-23bed9ec888e";
      fsType = "btrfs";
      options = [ "subvol=swap" ];
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/870D-75E2";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

   swapDevices = [ {
    device = "/var/lib/swapfile";
    size = 16*1024;
  } ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.br-06d972a1250d.useDHCP = lib.mkDefault true;
  # networking.interfaces.br-2623dba4e17d.useDHCP = lib.mkDefault true;
  # networking.interfaces.br-3ee3d2f2c736.useDHCP = lib.mkDefault true;
  # networking.interfaces.br-8c02ad6a5263.useDHCP = lib.mkDefault true;
  # networking.interfaces.docker0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp170s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
